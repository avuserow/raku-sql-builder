use Test;
use SQL::Builder;

my $sql = SQL::Builder.new;

subtest 'select clause', {
    given $sql.from('table').select('foo').build {
        is .sql, 'SELECT "foo" FROM "table"';
        is .bind, [];
    }

    given $sql.from('table').select('table.foo').build {
        is .sql, 'SELECT "table"."foo" FROM "table"';
        is .bind, [];
    }

    given $sql.from('table').select(:all).build {
        is .sql, 'SELECT * FROM "table"';
        is .bind, [];
    }
};

subtest 'where clause', {
    given $sql.from('table').where(:bar<bar>).select('foo').build {
        is .sql, 'SELECT "foo" FROM "table" WHERE "bar" = ?';
        is .bind, ['bar'];
    }
    given $sql.from('table').where(<bar = bar>).select('foo').build {
        is .sql, 'SELECT "foo" FROM "table" WHERE "bar" = ?';
        is .bind, ['bar'];
    }
    given $sql.from('table').where([['bar', '=', 'bar'],]).select('foo').build {
        is .sql, 'SELECT "foo" FROM "table" WHERE "bar" = ?';
        is .bind, ['bar'];
    }
    given $sql.from('table').where(['bar', '=', 'bar']).select('foo').build {
        is .sql, 'SELECT "foo" FROM "table" WHERE "bar" = ?';
        is .bind, ['bar'];
    }
    given $sql.from('table').where([:bar<bar>]).select('foo').build {
        is .sql, 'SELECT "foo" FROM "table" WHERE "bar" = ?';
        is .bind, ['bar'];
    }
    given $sql.from('table').where(:and, [:bar<bar>]).select('foo').build {
        is .sql, 'SELECT "foo" FROM "table" WHERE "bar" = ?';
        is .bind, ['bar'];
    }
    given $sql.from('table').where(:or, [:bar<bar>]).select('foo').build {
        is .sql, 'SELECT "foo" FROM "table" WHERE "bar" = ?';
        is .bind, ['bar'];
    }

    given $sql.from('table').where(:and, [:bar<bar>, :baz<baz>]).select('foo').build {
        is .sql, 'SELECT "foo" FROM "table" WHERE "bar" = ? AND "baz" = ?';
        is .bind, <bar baz>;
    }
    given $sql.from('table').where(:or, [:bar<bar>, :baz<baz>]).select('foo').build {
        is .sql, 'SELECT "foo" FROM "table" WHERE "bar" = ? OR "baz" = ?';
        is .bind, <bar baz>;
    }

    given $sql.from('table').where(:and, [<foo = 1>, <bar = 2>]).select('foo').build {
        is .sql, 'SELECT "foo" FROM "table" WHERE "foo" = ? AND "bar" = ?';
        is .bind, [<1 2>];
    }
    given $sql.from('table').where(:or, [<foo = 1>, <bar = 2>]).select('foo').build {
        is .sql, 'SELECT "foo" FROM "table" WHERE "foo" = ? OR "bar" = ?';
        is .bind, [<1 2>];
    }

    given $sql.from('table').where(:foo(Nil)).select('foo').build {
        is .sql, 'SELECT "foo" FROM "table" WHERE "foo" IS NULL';
        is .bind, [];
    }
}

subtest 'subselect', {
    my $inner = $sql.from('table').select('id');
    is $sql.from(:$inner).select(:all).build.sql, 'SELECT * FROM (SELECT "id" FROM "table") AS "inner"';

    given $sql.from('table').select(:all).where(['id', 'IN', $inner]).build  {
        is .sql, 'SELECT * FROM "table" WHERE "id" IN (SELECT "id" FROM "table")';
        is .bind, [];
    }
};

subtest 'join', {
    given $sql.from('t1').join('t2', :on('t1.foo', '=', Identifier.new('t2.foo'))).select('t1.foo').build {
        is .sql, 'SELECT "t1"."foo" FROM "t1" JOIN "t2" ON "t1"."foo" = "t2"."foo"';
        is .bind, [];
    }

    given $sql.from('t1').join(:left, 't2', :on('t1.foo', '=', Identifier.new('t2.foo'))).select('t1.foo').build {
        is .sql, 'SELECT "t1"."foo" FROM "t1" LEFT JOIN "t2" ON "t1"."foo" = "t2"."foo"';
        is .bind, [];
    }

    given $sql.from('t1').join('t2', :on(:and, ['t1.foo', '=', Identifier.new('t2.foo')], ['t1.bar', '=', 'hello world'])).select('t1.foo').build {
        is .sql, 'SELECT "t1"."foo" FROM "t1" JOIN "t2" ON "t1"."foo" = "t2"."foo" AND "t1"."bar" = ?';
        is .bind, ['hello world'];
    }
};

subtest 'column alias', {
    given $sql.from('t1').select(:b<a>).build {
        is .sql, 'SELECT "a" AS "b" FROM "t1"';
        is .bind, [];
    }
};

subtest 'sink error', {
    dies-ok {
        $sql.from('t1').select('a');
    }, 'selectbuilder';

    dies-ok {
        $sql.delete('t1').select('a').build;
    }, 'selectbuilder build';

    dies-ok {
        $sql.insert-into('t1').data([:a<b>]);
    }, 'insertbuilder';

    dies-ok {
        $sql.insert-into('t1').data([:a<b>]).build;
    }, 'insertbuilder build';

    dies-ok {
        $sql.update('t1').set([:b<a>]).where([:a<b>]);
    }, 'updatebuilder';

    dies-ok {
        $sql.update('t1').set([:b<a>]).where([:a<b>]).build;
    }, 'updatebuilder build';

    dies-ok {
        $sql.delete-from('t1').where([:a<b>]);
    }, 'deletebuilder';

    dies-ok {
        $sql.delete-from('t1').where([:a<b>]).build;
    }, 'deletebuilder build';
};

done-testing;
