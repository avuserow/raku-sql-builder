use Test;
use SQL::Cantrip;

my $sql = SQL::Cantrip.new;

subtest 'select clause', {
    is $sql.from('table').select('foo').build.sql, 'SELECT "foo" FROM "table"';

    is $sql.from('table').select(:all).build.sql, 'SELECT * FROM "table"';
};

subtest 'where clause', {
    is $sql.from('table').where(:bar<bar>).select('foo').build.sql, 'SELECT "foo" FROM "table" WHERE "bar" = ?';
    is $sql.from('table').where(<bar = bar>).select('foo').build.sql, 'SELECT "foo" FROM "table" WHERE "bar" = ?';
    is $sql.from('table').where([:bar<bar>]).select('foo').build.sql, 'SELECT "foo" FROM "table" WHERE "bar" = ?';
    is $sql.from('table').where(:and, [:bar<bar>]).select('foo').build.sql, 'SELECT "foo" FROM "table" WHERE "bar" = ?';
    is $sql.from('table').where(:or, [:bar<bar>]).select('foo').build.sql, 'SELECT "foo" FROM "table" WHERE "bar" = ?';

    is $sql.from('table').where(:and, [:bar<bar>, :baz<baz>]).select('foo').build.sql, 'SELECT "foo" FROM "table" WHERE "bar" = ? AND "baz" = ?';
    is $sql.from('table').where(:or, [:bar<bar>, :baz<baz>]).select('foo').build.sql, 'SELECT "foo" FROM "table" WHERE "bar" = ? OR "baz" = ?';

    is $sql.from('table').where(:and, [<foo = 1>, <bar = 2>]).select('foo').build.sql, 'SELECT "foo" FROM "table" WHERE "foo" = ? AND "bar" = ?';
    is $sql.from('table').where(:or, [<foo = 1>, <bar = 2>]).select('foo').build.sql, 'SELECT "foo" FROM "table" WHERE "foo" = ? OR "bar" = ?';
}

subtest 'subselect', {
    my $inner = $sql.from('table').select('id');
    is $sql.from(:$inner).select(:all).build.sql, 'SELECT * FROM (SELECT "id" FROM "table") AS "inner"';
};

done-testing;
